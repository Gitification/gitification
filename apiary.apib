HOST: http://random-gamification.com

--- Gitification Gamification Provider ---
---
API v0.0.1

Visit https://github.com/Gitification/gitification/ for more informations.
---

--
Applications
All operations related to the application resource are in this section..
--
Get applications registered on the server.

*Resource may only be used by API_KEY for Super-Admin console.*
GET /applications
> Authorization: $API_KEY
< 200
< Content-Type: application/json
{
	[
		{
			"application_id":<OID>,
			"site":<String>,
			"callback":<String>,
			"created_at":<Date>,
			"admin":<String>,
			"statistics":
			{
				"user_count":<Integer>,
				"event_count":<Integer>,
				"badge_count":<Integer>,
				"rule_count":<Integer>
			}
		}
	]
}
+++++
< 401
< Content-Type: application/json
{ "code":"error", "message":"Access denied." }

Get application information.
GET /applications/{appid}
> Authorization: $API_KEY
< 200
< Content-Type: application/json
{
	"application_id":<OID>,
	"site":<String>,
	"callback":<String>,
	"createdAt":<Date>,
	"admin":<String>,
	"statistics":
	{
		"user_count":<Integer>,
		"event_count":<Integer>
		"badge_count":<Integer>,
		"rule_count":<Integer>
	}
}
+++++
< 404
< Content-Type: application/json
{ "code":"error", "message":"Resource not found." }
+++++
< 401
< Content-Type: application/json
{ "code":"error", "message":"Access denied." }

Register a new application
POST /applications
> Content-Type: application/json
{
	"site":<String>,
	"callback":<String>,
	"admin":<String>
}
< 201
< Content-Type: application/json
{
	"code":"success",
	"message":"Successfully registered.",
	"payload":
	{
		"api_key":<String>,
		"secret_key":<String>
	}
}
+++++
< 409
< Content-Type: application/json
{ "code":"error", "message":"Application cannot be created. Contact our helpdesk at http://random-gamification.com" }

--
Leaderboard
All operations related to the leaderboard resource are in this section.
--

Get leaderboard of the application
GET /applications/{appid}/leaderboard
> Authorization: $API_KEY
< 200
< Content-Type: application/json
{
	[
		{
			"position":<Integer>,
			"user_id":<OID>,
			"login":<String>,
			"firstname":<String>,
			"lastname":<String>,
			"email":<String>,
			"statistics":
			{
				"badge_count":<Integer>,
			}
		}
	]
}
+++++
< 401
< Content-Type: application/json
{ "code":"error", "message":"Access denied." }

--
Users
All operations related to the user resource are in this section.
--

Get the list of all users in the GET
GET /applications/{appid}/users
> Authorization: $API_KEY
< 200
< Content-Type: application/json
{
	[
		{
			"user_id":<OID>,
			"login":<String>,
			"firstname":<String>,
			"lastname":<String>,
			"email":<String>
		}
	]
}
+++++
< 401
< Content-Type: application/json
{ "code":"error", "message":"Access denied." }

Get the informations about a specific user
GET /applications/{appid}/users/{userid}
> Authorization: $API_KEY
< 200
< Content-Type: application/json
{
	"user_id":<OID>,
	"login":<String>,
	"firstname":<String>,
	"lastname":<String>,
	"email":<String>
}
+++++
< 401
< Content-Type: application/json
{ "code":"error", "message":"Access denied." }
+++++
< 404
< Content-Type: application/json
{ "code":"error", "message":"Resource not found." }

Get all badges of a specific user
GET /applications/{appid}/users/{userid}/badges
> Authorization: $API_KEY
< 200
< Content-Type: application/json
{
	"user_id":<OID>,
	"badges_list":
	[
		{
			"badge_id":<OID>,
			"category_id":<OID>
			"name":<String>,
			"icon":<String>
		}
	]
}
+++++
< 401
< Content-Type: application/json
{ "code":"error", "message":"Access denied." }
+++++
< 404
< Content-Type: application/json
{ "code":"error", "message":"Resource not found." }

Add a new user in the application
POST /applications/{appid}/users
> Authorization: $API_KEY
> Content-type: application/json
{
	"login":<String>,
	"firstname":<String>,
	"lastname":<String>,
	"email":<String>
}
< 201
< Content-Type: application/json
{
	"code":"success",
	"message":"Successfully added",
	"payload":
	{
		"user_id":<OID>
	}
}
+++++
< 401
< Content-Type: application/json
{ "code":"error", "message":"Access denied." }
+++++
< 405
< Content-Type: application/json
{ "code":"error", "message":"Method Not Allowed." }

Update the informations of a users
PUT /applications/{appid}/users/{userid}
> Authorization: $API_KEY
{
	"user_id":<OID>,
	"login":<String>,
	"firstname":<String>,
	"lastname":<String>,
	"email":<String>
}
< 200
< Content-Type: application/json
{ "code":"success", "message":"User was updated." }
+++++
< 401
< Content-Type: application/json
{ "code":"error", "message":"Access denied." }
+++++
< 404
< Content-Type: application/json
{ "code":"error", "message":"Resource not found." }
+++++
< 405
< Content-Type: application/json
{ "code":"error", "message":"Method Not Allowed." }

Delete a user from the application
DELETE /applications/{appid}/users/{userid}
> Authorization: $API_KEY
< 200
< Content-Type: application/json
{ "code":"success", "message":"User was deleted." }
+++++
< 401
< Content-Type: application/json
{ "code":"error", "message":"Access denied." }
+++++
< 404
< Content-Type: application/json
{ "code":"error", "message":"Resource not found." }

--
Events

All operations related to the event resource are in this section.

Everything that has to be monitored by the gamification platform is recorded as an event and has to be posted to the gamification API.
--

Gets the list of all events registered on the gamification server for the appid.
GET /applications/{appid}/events
> Authorization: $API_KEY
< 200
< Content-Type: application/json
{
	[
		{
			"event_id":<OID>,
			"type":<OID>,
			"user":<OID>,
			"issued":<Date>
		}
	]
}
+++++
< 401
< Content-Type: application/json
{ "code":"error", "message":"Access denied." }

Get detailed information about a specific event identified by eventid
GET /applications/{appid}/events/{eventid}
> Authorization: $API_KEY
< 200
< Content-Type: application/json
{
	"event_id":<OID>,
	"type":<OID>,
	"user":<OID>,
	"issued":<Date>
}
+++++
< 401
< Content-Type: application/json
{ "code":"error", "message":"Access denied." }
+++++
< 404
< Content-Type: application/json
{ "code":"error", "message":"Resource not found." }

Register a new event on the gamification platform for your application
POST /applications/{appid}/events
> Authorization: $API_KEY
> Content-Type: application/json
{
	"type":<OID>,
	"user":<OID>,
	"issued":<Date>
}
< 201
< Content-Type: application/json
{
	"code":"success",
	"message":"Successfully added"
	"payload":
	{
		"event_id":<OID>
	}
}
+++++
< 401
< Content-Type: application/json
{ "code":"error", "message":"Access denied." }

--
Event Types

All operations related to the event type resource are in this section.

All events that are recorded by the gamification API are associated with a type. The types can be defined by the application using the API with the related API calls. Then event types will be used in rules to define the conditions needed to obtain a badge.
--

Get the list of all types define for this application id.
GET /applications/{appid}/events/types
> Authorization: $API_KEY
< 200
< Content-Type: application/json
{
	[
		{
			"type_id":<OID>,
			"name":<String>
		}
	]
}
+++++
< 401
< Content-Type: application/json
{ "code":"error", "message":"Access denied." }

Get information about a specific type id
GET /applications/{appid}/events/types/{typeid}
> Timestamp: timestamp
> Signature: signature
> Signature-Method: HMAC-SHA1
> Authorization: api_key
< 200
< Content-Type: application/json
{
	"type_id":<OID>,
	"name":<String>
}
+++++
< 401
< Content-Type: application/json
{ "code":"error", "message":"Access denied." }
+++++
< 404
< Content-Type: application/json
{ "code":"error", "message":"Resource not found." }

Add a new event type in the application
POST /applications/{appid}/events/types
> Authorization: $API_KEY
> Content-Type: application/json
{
	[
		{
			"name":<String>
		}
	]
}
< 201
< Content-Type: application/json
{
	"code":"success",
	"message":"Successfully added",
	"payload":
	{
		"event_type_id":<OID>
	}
}
+++++
< 401
< Content-Type: application/json
{ "code":"error", "message":"Access denied." }

--
Rules

All operations related to the rule resource are in this section.

A rule define when a badge should be granted to an user. A rule is defined by a list of EventType and threshold.
--

Get rules defined for the given application
GET /applications/{appid}/rules
> Authorization: $API_KEY
< 200
< Content-Type: application/json
{
	[
		{
			"rule_id":<OID>,
			"name":<String>,
			"badge":<OID>,
			"event_types":
			[
				{
					event_type:<OID>,
					threshold:<Integer>
				}
			]
		}
	]
}
+++++
< 401
< Content-Type: application/json
{ "code":"error", "message":"Access denied." }

Get rule information
GET /applications/{appid}/rules/{ruleid}
> Authorization: $API_KEY
< 200
< Content-Type: application/json
{
	"rule_id":<OID>,
	"name":<String>,
	"badge":<OID>,
	"event_types":
	[
		{
			"event_type":<OID>,
			"threshold":<Integer>
		}
	]
}
+++++
< 401
< Content-Type: application/json
{ "code":"error", "message":"Access denied." }
+++++
< 404
< Content-Type: application/json
{ "code":"error", "message":"Resource not found." }


Add a new rule for the given application
POST /applications/{appid}/rules
> Authorization: $API_KEY
> Content-Type: application/json
{
	"name":<String>,
	"badge":<OID>,
	"event_types":
	[
		"event_type":<OID>,
		"threshold":<Integer>
	]
}
< 201
< Content-Type: application/json
{
	"code":"success",
	"message":"Rule successfully registered.",
	"payload":
	{
		"rule_id":<OID>,
	}
}
+++++
< 409
< Content-Type: application/json
{ "code":"error", "message":"Rule cannot be created." }

Update the information of the given rule
PUT /applications/{appid}/rules/{ruleid}
> Authorization: $API_KEY
{
	"rule_id":<OID>,
	"name":<String>,
	"badge":<OID>,
	"event_types":
	[
		"event_type":<OID>,
		"threshold":<Integer>
	]
}
< 200
< Content-Type: application/json
{ "code":"success", "message":"Rule has been updated." }
+++++
< 401
< Content-Type: application/json
{ "code":"error", "message":"Access denied." }
+++++
< 404
< Content-Type: application/json
{ "code":"error", "message":"Resource not found." }
+++++
< 405
< Content-Type: application/json
{ "code":"error", "message":"Method Not Allowed." }

Delete a rule from the given application
DELETE /applications/{appid}/rules/{ruleid}
> Authorization: $API_KEY
< 200
< Content-Type: application/json
{ "code":"success", "message":"Rule has been deleted." }
+++++
< 401
< Content-Type: application/json
{ "code":"error", "message":"Access denied." }
+++++
< 404
< Content-Type: application/json
{ "code":"error", "message":"Resource not found." }

--
Badges

All operations related to the badge resource are in this section.

A badge is given to an user for awesomeness.
--

Get badges for the given application. *category_id is optional*.
GET /applications/{appid}/badges
> Authorization: $API_KEY
< 200
< Content-Type: application/json
{
	[
		{
			"badge_id":<OID>,
			"category_id":<OID>
			"name":<String>,
			"icon":<String>
		}
	]
}
+++++
< 401
< Content-Type: application/json
{ "code":"error", "message":"Access denied." }

Get information of the given badge. *category_id is optional*.
GET /applications/{appid}/badges/{badgeid}
> Authorization: $API_KEY
< 200
< Content-Type: application/json
{
	"badge_id":<OID>,
	"category_id":<OID>,
	"name":<String>,
	"icon":<String>
}
+++++
< 404
< Content-Type: application/json
{ "code":"error", "message":"Resource not found." }
+++++
< 401
< Content-Type: application/json
{ "code":"error", "message":"Access denied." }

Add a new badge for the given application. *category_id is optional*.
POST /applications/{appid}/badges
> Authorization: $API_KEY
> Content-Type: application/json
{
	"name":<String>,
	"icon":<String>,
	"category_id":<OID>
}
< 201
< Content-Type: application/json
{
	"code":"success",
	"message":"Badge successfully registered.",
	"payload":
	{
		"badge_id":<OID>
	}
}
+++++
< 401
< Content-Type: application/json
{ "code":"error", "message":"Access denied." }
+++++
< 409
< Content-Type: application/json
{ "code":"error", "message":"Badge cannot be created." }

Update a badge. *category_id is optional*.
PUT /applications/{appid}/badges/{badgeid}
> Authorization: $API_KEY
{
	"badge_id":<OID>,
	"category_id":<OID>,
	"name":<String>,
	"icon":<String>
}
< 200
< Content-Type: application/json
{ "code":"success", "message":"Badge has been updated." }
+++++
< 401
< Content-Type: application/json
{ "code":"error", "message":"Access denied." }
+++++
< 404
< Content-Type: application/json
{ "code":"error", "message":"Resource not found." }
+++++
< 405
< Content-Type: application/json
{ "code":"error", "message":"Method Not Allowed." }

--
Badge Categories

All operations related to the badge category resource are in this section.

A category groups badges together.
--

Get badge categories for the given application
GET /applications/{appid}/badges/categories
> Authorization: $API_KEY
< 200
< Content-Type: application/json
{
	[
		{
			"category_id":<OID>,
			"name":<String>
		}
	]
}
+++++
< 401
< Content-Type: application/json
{ "code":"error", "message":"Access denied." }

Get badge category for the given application
GET /applications/{appid}/badges/categories/{categoryid}
> Authorization: $API_KEY
< 200
< Content-Type: application/json
{
	"category_id":<OID>,
	"name":<String>
}
+++++
< 401
< Content-Type: application/json
{ "code":"error", "message":"Access denied." }

Add a new badge category for the given application
POST /applications/{appid}/badges/categories/{categoryid}
> Authorization: $API_KEY
> Content-Type: application/json
{
	"name":<String>
}
< 200
< Content-Type: application/json
{
	"code":"success",
	"message":"Category successfully registered.",
	"payload":
	{
		"category_id":<OID>
	}
}
+++++
< 401
< Content-Type: application/json
{ "code":"error", "message":"Access denied." }
+++++
< 409
< Content-Type: application/json
{ "code":"error", "message":"Badge category cannot be created." }

Update a badge category
PUT /applications/{appid}/badges/categories/{categoryid}
> Authorization: $API_KEY
{
	"name":<String>
}
< 200
< Content-Type: application/json
{ "code":"success", "message":"Badge category has been updated." }
+++++
< 401
< Content-Type: application/json
{ "code":"error", "message":"Access denied." }
+++++
< 404
< Content-Type: application/json
{ "code":"error", "message":"Resource not found." }
+++++
< 405
< Content-Type: application/json
{ "code":"error", "message":"Method Not Allowed." }
